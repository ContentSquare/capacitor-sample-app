{"version":3,"file":"static/js/738.6579f4c6.chunk.js","mappings":"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","sources":["../node_modules/@stencil/core/internal/client/shadow-css.js"],"sourcesContent":["/*\n Stencil Client Platform v2.19.3 | MIT Licensed | https://stenciljs.com\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n *\n * This file is a port of shadowCSS from webcomponents.js to TypeScript.\n * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js\n * https://github.com/angular/angular/blob/master/packages/compiler/src/shadow_css.ts\n */\nconst safeSelector = (selector) => {\n    const placeholders = [];\n    let index = 0;\n    // Replaces attribute selectors with placeholders.\n    // The WS in [attr=\"va lue\"] would otherwise be interpreted as a selector separator.\n    selector = selector.replace(/(\\[[^\\]]*\\])/g, (_, keep) => {\n        const replaceBy = `__ph-${index}__`;\n        placeholders.push(keep);\n        index++;\n        return replaceBy;\n    });\n    // Replaces the expression in `:nth-child(2n + 1)` with a placeholder.\n    // WS and \"+\" would otherwise be interpreted as selector separators.\n    const content = selector.replace(/(:nth-[-\\w]+)(\\([^)]+\\))/g, (_, pseudo, exp) => {\n        const replaceBy = `__ph-${index}__`;\n        placeholders.push(exp);\n        index++;\n        return pseudo + replaceBy;\n    });\n    const ss = {\n        content,\n        placeholders,\n    };\n    return ss;\n};\nconst restoreSafeSelector = (placeholders, content) => {\n    return content.replace(/__ph-(\\d+)__/g, (_, index) => placeholders[+index]);\n};\nconst _polyfillHost = '-shadowcsshost';\nconst _polyfillSlotted = '-shadowcssslotted';\n// note: :host-context pre-processed to -shadowcsshostcontext.\nconst _polyfillHostContext = '-shadowcsscontext';\nconst _parenSuffix = ')(?:\\\\((' + '(?:\\\\([^)(]*\\\\)|[^)(]*)+?' + ')\\\\))?([^,{]*)';\nconst _cssColonHostRe = new RegExp('(' + _polyfillHost + _parenSuffix, 'gim');\nconst _cssColonHostContextRe = new RegExp('(' + _polyfillHostContext + _parenSuffix, 'gim');\nconst _cssColonSlottedRe = new RegExp('(' + _polyfillSlotted + _parenSuffix, 'gim');\nconst _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';\nconst _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\\s]*)/;\nconst _shadowDOMSelectorsRe = [/::shadow/g, /::content/g];\nconst _selectorReSuffix = '([>\\\\s~+[.,{:][\\\\s\\\\S]*)?$';\nconst _polyfillHostRe = /-shadowcsshost/gim;\nconst _colonHostRe = /:host/gim;\nconst _colonSlottedRe = /::slotted/gim;\nconst _colonHostContextRe = /:host-context/gim;\nconst _commentRe = /\\/\\*\\s*[\\s\\S]*?\\*\\//g;\nconst stripComments = (input) => {\n    return input.replace(_commentRe, '');\n};\nconst _commentWithHashRe = /\\/\\*\\s*#\\s*source(Mapping)?URL=[\\s\\S]+?\\*\\//g;\nconst extractCommentsWithHash = (input) => {\n    return input.match(_commentWithHashRe) || [];\n};\nconst _ruleRe = /(\\s*)([^;\\{\\}]+?)(\\s*)((?:{%BLOCK%}?\\s*;?)|(?:\\s*;))/g;\nconst _curlyRe = /([{}])/g;\nconst _selectorPartsRe = /(^.*?[^\\\\])??((:+)(.*)|$)/;\nconst OPEN_CURLY = '{';\nconst CLOSE_CURLY = '}';\nconst BLOCK_PLACEHOLDER = '%BLOCK%';\nconst processRules = (input, ruleCallback) => {\n    const inputWithEscapedBlocks = escapeBlocks(input);\n    let nextBlockIndex = 0;\n    return inputWithEscapedBlocks.escapedString.replace(_ruleRe, (...m) => {\n        const selector = m[2];\n        let content = '';\n        let suffix = m[4];\n        let contentPrefix = '';\n        if (suffix && suffix.startsWith('{' + BLOCK_PLACEHOLDER)) {\n            content = inputWithEscapedBlocks.blocks[nextBlockIndex++];\n            suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);\n            contentPrefix = '{';\n        }\n        const cssRule = {\n            selector,\n            content,\n        };\n        const rule = ruleCallback(cssRule);\n        return `${m[1]}${rule.selector}${m[3]}${contentPrefix}${rule.content}${suffix}`;\n    });\n};\nconst escapeBlocks = (input) => {\n    const inputParts = input.split(_curlyRe);\n    const resultParts = [];\n    const escapedBlocks = [];\n    let bracketCount = 0;\n    let currentBlockParts = [];\n    for (let partIndex = 0; partIndex < inputParts.length; partIndex++) {\n        const part = inputParts[partIndex];\n        if (part === CLOSE_CURLY) {\n            bracketCount--;\n        }\n        if (bracketCount > 0) {\n            currentBlockParts.push(part);\n        }\n        else {\n            if (currentBlockParts.length > 0) {\n                escapedBlocks.push(currentBlockParts.join(''));\n                resultParts.push(BLOCK_PLACEHOLDER);\n                currentBlockParts = [];\n            }\n            resultParts.push(part);\n        }\n        if (part === OPEN_CURLY) {\n            bracketCount++;\n        }\n    }\n    if (currentBlockParts.length > 0) {\n        escapedBlocks.push(currentBlockParts.join(''));\n        resultParts.push(BLOCK_PLACEHOLDER);\n    }\n    const strEscapedBlocks = {\n        escapedString: resultParts.join(''),\n        blocks: escapedBlocks,\n    };\n    return strEscapedBlocks;\n};\nconst insertPolyfillHostInCssText = (selector) => {\n    selector = selector\n        .replace(_colonHostContextRe, _polyfillHostContext)\n        .replace(_colonHostRe, _polyfillHost)\n        .replace(_colonSlottedRe, _polyfillSlotted);\n    return selector;\n};\nconst convertColonRule = (cssText, regExp, partReplacer) => {\n    // m[1] = :host(-context), m[2] = contents of (), m[3] rest of rule\n    return cssText.replace(regExp, (...m) => {\n        if (m[2]) {\n            const parts = m[2].split(',');\n            const r = [];\n            for (let i = 0; i < parts.length; i++) {\n                const p = parts[i].trim();\n                if (!p)\n                    break;\n                r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));\n            }\n            return r.join(',');\n        }\n        else {\n            return _polyfillHostNoCombinator + m[3];\n        }\n    });\n};\nconst colonHostPartReplacer = (host, part, suffix) => {\n    return host + part.replace(_polyfillHost, '') + suffix;\n};\nconst convertColonHost = (cssText) => {\n    return convertColonRule(cssText, _cssColonHostRe, colonHostPartReplacer);\n};\nconst colonHostContextPartReplacer = (host, part, suffix) => {\n    if (part.indexOf(_polyfillHost) > -1) {\n        return colonHostPartReplacer(host, part, suffix);\n    }\n    else {\n        return host + part + suffix + ', ' + part + ' ' + host + suffix;\n    }\n};\nconst convertColonSlotted = (cssText, slotScopeId) => {\n    const slotClass = '.' + slotScopeId + ' > ';\n    const selectors = [];\n    cssText = cssText.replace(_cssColonSlottedRe, (...m) => {\n        if (m[2]) {\n            const compound = m[2].trim();\n            const suffix = m[3];\n            const slottedSelector = slotClass + compound + suffix;\n            let prefixSelector = '';\n            for (let i = m[4] - 1; i >= 0; i--) {\n                const char = m[5][i];\n                if (char === '}' || char === ',') {\n                    break;\n                }\n                prefixSelector = char + prefixSelector;\n            }\n            const orgSelector = prefixSelector + slottedSelector;\n            const addedSelector = `${prefixSelector.trimRight()}${slottedSelector.trim()}`;\n            if (orgSelector.trim() !== addedSelector.trim()) {\n                const updatedSelector = `${addedSelector}, ${orgSelector}`;\n                selectors.push({\n                    orgSelector,\n                    updatedSelector,\n                });\n            }\n            return slottedSelector;\n        }\n        else {\n            return _polyfillHostNoCombinator + m[3];\n        }\n    });\n    return {\n        selectors,\n        cssText,\n    };\n};\nconst convertColonHostContext = (cssText) => {\n    return convertColonRule(cssText, _cssColonHostContextRe, colonHostContextPartReplacer);\n};\nconst convertShadowDOMSelectors = (cssText) => {\n    return _shadowDOMSelectorsRe.reduce((result, pattern) => result.replace(pattern, ' '), cssText);\n};\nconst makeScopeMatcher = (scopeSelector) => {\n    const lre = /\\[/g;\n    const rre = /\\]/g;\n    scopeSelector = scopeSelector.replace(lre, '\\\\[').replace(rre, '\\\\]');\n    return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');\n};\nconst selectorNeedsScoping = (selector, scopeSelector) => {\n    const re = makeScopeMatcher(scopeSelector);\n    return !re.test(selector);\n};\nconst injectScopingSelector = (selector, scopingSelector) => {\n    return selector.replace(_selectorPartsRe, (_, before = '', _colonGroup, colon = '', after = '') => {\n        return before + scopingSelector + colon + after;\n    });\n};\nconst applySimpleSelectorScope = (selector, scopeSelector, hostSelector) => {\n    // In Android browser, the lastIndex is not reset when the regex is used in String.replace()\n    _polyfillHostRe.lastIndex = 0;\n    if (_polyfillHostRe.test(selector)) {\n        const replaceBy = `.${hostSelector}`;\n        return selector\n            .replace(_polyfillHostNoCombinatorRe, (_, selector) => injectScopingSelector(selector, replaceBy))\n            .replace(_polyfillHostRe, replaceBy + ' ');\n    }\n    return scopeSelector + ' ' + selector;\n};\nconst applyStrictSelectorScope = (selector, scopeSelector, hostSelector) => {\n    const isRe = /\\[is=([^\\]]*)\\]/g;\n    scopeSelector = scopeSelector.replace(isRe, (_, ...parts) => parts[0]);\n    const className = '.' + scopeSelector;\n    const _scopeSelectorPart = (p) => {\n        let scopedP = p.trim();\n        if (!scopedP) {\n            return '';\n        }\n        if (p.indexOf(_polyfillHostNoCombinator) > -1) {\n            scopedP = applySimpleSelectorScope(p, scopeSelector, hostSelector);\n        }\n        else {\n            // remove :host since it should be unnecessary\n            const t = p.replace(_polyfillHostRe, '');\n            if (t.length > 0) {\n                scopedP = injectScopingSelector(t, className);\n            }\n        }\n        return scopedP;\n    };\n    const safeContent = safeSelector(selector);\n    selector = safeContent.content;\n    let scopedSelector = '';\n    let startIndex = 0;\n    let res;\n    const sep = /( |>|\\+|~(?!=))\\s*/g;\n    // If a selector appears before :host it should not be shimmed as it\n    // matches on ancestor elements and not on elements in the host's shadow\n    // `:host-context(div)` is transformed to\n    // `-shadowcsshost-no-combinatordiv, div -shadowcsshost-no-combinator`\n    // the `div` is not part of the component in the 2nd selectors and should not be scoped.\n    // Historically `component-tag:host` was matching the component so we also want to preserve\n    // this behavior to avoid breaking legacy apps (it should not match).\n    // The behavior should be:\n    // - `tag:host` -> `tag[h]` (this is to avoid breaking legacy apps, should not match anything)\n    // - `tag :host` -> `tag [h]` (`tag` is not scoped because it's considered part of a\n    //   `:host-context(tag)`)\n    const hasHost = selector.indexOf(_polyfillHostNoCombinator) > -1;\n    // Only scope parts after the first `-shadowcsshost-no-combinator` when it is present\n    let shouldScope = !hasHost;\n    while ((res = sep.exec(selector)) !== null) {\n        const separator = res[1];\n        const part = selector.slice(startIndex, res.index).trim();\n        shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n        const scopedPart = shouldScope ? _scopeSelectorPart(part) : part;\n        scopedSelector += `${scopedPart} ${separator} `;\n        startIndex = sep.lastIndex;\n    }\n    const part = selector.substring(startIndex);\n    shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n    scopedSelector += shouldScope ? _scopeSelectorPart(part) : part;\n    // replace the placeholders with their original values\n    return restoreSafeSelector(safeContent.placeholders, scopedSelector);\n};\nconst scopeSelector = (selector, scopeSelectorText, hostSelector, slotSelector) => {\n    return selector\n        .split(',')\n        .map((shallowPart) => {\n        if (slotSelector && shallowPart.indexOf('.' + slotSelector) > -1) {\n            return shallowPart.trim();\n        }\n        if (selectorNeedsScoping(shallowPart, scopeSelectorText)) {\n            return applyStrictSelectorScope(shallowPart, scopeSelectorText, hostSelector).trim();\n        }\n        else {\n            return shallowPart.trim();\n        }\n    })\n        .join(', ');\n};\nconst scopeSelectors = (cssText, scopeSelectorText, hostSelector, slotSelector, commentOriginalSelector) => {\n    return processRules(cssText, (rule) => {\n        let selector = rule.selector;\n        let content = rule.content;\n        if (rule.selector[0] !== '@') {\n            selector = scopeSelector(rule.selector, scopeSelectorText, hostSelector, slotSelector);\n        }\n        else if (rule.selector.startsWith('@media') ||\n            rule.selector.startsWith('@supports') ||\n            rule.selector.startsWith('@page') ||\n            rule.selector.startsWith('@document')) {\n            content = scopeSelectors(rule.content, scopeSelectorText, hostSelector, slotSelector);\n        }\n        const cssRule = {\n            selector: selector.replace(/\\s{2,}/g, ' ').trim(),\n            content,\n        };\n        return cssRule;\n    });\n};\nconst scopeCssText = (cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector) => {\n    cssText = insertPolyfillHostInCssText(cssText);\n    cssText = convertColonHost(cssText);\n    cssText = convertColonHostContext(cssText);\n    const slotted = convertColonSlotted(cssText, slotScopeId);\n    cssText = slotted.cssText;\n    cssText = convertShadowDOMSelectors(cssText);\n    if (scopeId) {\n        cssText = scopeSelectors(cssText, scopeId, hostScopeId, slotScopeId);\n    }\n    cssText = cssText.replace(/-shadowcsshost-no-combinator/g, `.${hostScopeId}`);\n    cssText = cssText.replace(/>\\s*\\*\\s+([^{, ]+)/gm, ' $1 ');\n    return {\n        cssText: cssText.trim(),\n        slottedSelectors: slotted.selectors,\n    };\n};\nconst scopeCss = (cssText, scopeId, commentOriginalSelector) => {\n    const hostScopeId = scopeId + '-h';\n    const slotScopeId = scopeId + '-s';\n    const commentsWithHash = extractCommentsWithHash(cssText);\n    cssText = stripComments(cssText);\n    const orgSelectors = [];\n    if (commentOriginalSelector) {\n        const processCommentedSelector = (rule) => {\n            const placeholder = `/*!@___${orgSelectors.length}___*/`;\n            const comment = `/*!@${rule.selector}*/`;\n            orgSelectors.push({ placeholder, comment });\n            rule.selector = placeholder + rule.selector;\n            return rule;\n        };\n        cssText = processRules(cssText, (rule) => {\n            if (rule.selector[0] !== '@') {\n                return processCommentedSelector(rule);\n            }\n            else if (rule.selector.startsWith('@media') ||\n                rule.selector.startsWith('@supports') ||\n                rule.selector.startsWith('@page') ||\n                rule.selector.startsWith('@document')) {\n                rule.content = processRules(rule.content, processCommentedSelector);\n                return rule;\n            }\n            return rule;\n        });\n    }\n    const scoped = scopeCssText(cssText, scopeId, hostScopeId, slotScopeId);\n    cssText = [scoped.cssText, ...commentsWithHash].join('\\n');\n    if (commentOriginalSelector) {\n        orgSelectors.forEach(({ placeholder, comment }) => {\n            cssText = cssText.replace(placeholder, comment);\n        });\n    }\n    scoped.slottedSelectors.forEach((slottedSelector) => {\n        cssText = cssText.replace(slottedSelector.orgSelector, slottedSelector.updatedSelector);\n    });\n    return cssText;\n};\n\nexport { scopeCss };\n"],"names":["_polyfillHost","_polyfillSlotted","_polyfillHostContext","_parenSuffix","_cssColonHostRe","RegExp","_cssColonHostContextRe","_cssColonSlottedRe","_polyfillHostNoCombinator","_polyfillHostNoCombinatorRe","_shadowDOMSelectorsRe","_polyfillHostRe","_colonHostRe","_colonSlottedRe","_colonHostContextRe","_commentRe","_commentWithHashRe","_ruleRe","_curlyRe","_selectorPartsRe","BLOCK_PLACEHOLDER","processRules","input","ruleCallback","inputWithEscapedBlocks","escapeBlocks","nextBlockIndex","escapedString","replace","selector","arguments","length","undefined","content","suffix","contentPrefix","startsWith","blocks","substring","cssRule","rule","concat","inputParts","split","resultParts","escapedBlocks","bracketCount","currentBlockParts","partIndex","part","push","join","convertColonRule","cssText","regExp","partReplacer","_len","m","Array","_key","parts","r","i","p","trim","colonHostPartReplacer","host","colonHostContextPartReplacer","indexOf","selectorNeedsScoping","scopeSelector","re","makeScopeMatcher","test","injectScopingSelector","scopingSelector","_","before","colon","after","applyStrictSelectorScope","hostSelector","res","className","_scopeSelectorPart","scopedP","lastIndex","replaceBy","applySimpleSelectorScope","t","safeContent","placeholders","index","keep","pseudo","exp","safeSelector","scopedSelector","startIndex","sep","shouldScope","exec","separator","slice","scopedPart","scopeSelectors","scopeSelectorText","slotSelector","commentOriginalSelector","map","shallowPart","scopeCssText","scopeId","hostScopeId","slotScopeId","slotted","slotClass","selectors","_len2","_key2","compound","slottedSelector","prefixSelector","char","orgSelector","addedSelector","trimRight","updatedSelector","convertColonSlotted","convertColonHostContext","convertColonHost","reduce","result","pattern","convertShadowDOMSelectors","slottedSelectors","scopeCss","commentsWithHash","match","stripComments","orgSelectors","processCommentedSelector","placeholder","comment","scoped","_toConsumableArray","forEach","_ref"],"sourceRoot":""}