{"ast":null,"code":"import { NavigationEnd, NavigationError } from '@angular/router';\nimport { register } from 'swiper/element/bundle';\nimport { ContentsquarePlugin } from '@contentsquare/capacitor-plugin';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ionic/angular\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"./services/contentsquare.service\";\nregister();\nexport let AppComponent = /*#__PURE__*/(() => {\n  class AppComponent {\n    constructor(platform, router, csService) {\n      this.platform = platform;\n      this.router = router;\n      this.csService = csService;\n      //Send 1st event manually sendScreenName when platform is ready\n      this.csService.sendScreenName('/home');\n      // We subscribe to Angular router events. When the URL changes, we send the corresponding screen name\n      this.router.events.subscribe(event => {\n        if (event instanceof NavigationEnd) {\n          if (event.url !== '/') {\n            // Some cases need \"urlAfterRedirects\" value, for example when after a tab container is loaded, it will redirect to one of its tab\n            this.csService.sendScreenName(event.urlAfterRedirects);\n          }\n        }\n        if (event instanceof NavigationError) {\n          // Present error to user\n          console.log(event.error);\n        }\n      });\n      this.platform.ready().then(readySource => {\n        console.log('Platform ready from', readySource);\n        this.initSRMasking();\n      });\n    }\n    initSRMasking() {\n      console.log('set PII Selectors:' + JSON.stringify(environment.piiSelectors));\n      ContentsquarePlugin.setPIISelectors(environment.piiSelectors);\n    }\n    static {\n      this.ɵfac = function AppComponent_Factory(t) {\n        return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.Platform), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.ContentsquareService));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: AppComponent,\n        selectors: [[\"app-root\"]],\n        decls: 2,\n        vars: 0,\n        template: function AppComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"ion-app\");\n            i0.ɵɵelement(1, \"ion-router-outlet\");\n            i0.ɵɵelementEnd();\n          }\n        },\n        dependencies: [i1.IonApp, i1.IonRouterOutlet]\n      });\n    }\n  }\n  return AppComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}